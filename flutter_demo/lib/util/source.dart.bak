import 'package:letskeep/utils/custom/custom_util.dart';
import 'package:letskeep/widgets/custom/custom_widget.dart' as CustomWidget;

/**
 * @author wu chao
 * @project flutter_demo
 * @date 2021/5/27
 */
//路由工具类
class RouterUtil {

  //路由key
  static final GlobalKey<NavigatorState> routerGlobalKey =
  GlobalKey<NavigatorState>();

  //路由跳转
  static Future push(String routerName, {dynamic data}) {
    return routerGlobalKey.currentState.pushNamed(routerName, arguments: data);
  }

  //路由跳转清除当前路由
  static Future pushReplacementNamed(String routerName, {dynamic data}) {
    return routerGlobalKey.currentState
        .pushReplacementNamed(routerName, arguments: data);
  }

  //路由跳转清除之前所有路由
  static Future pushAndRemoveUntil(String routerName, {dynamic data}) {
    return routerGlobalKey.currentState.pushNamedAndRemoveUntil(
        routerName, (route) => route == null,
        arguments: data);
  }

  //关闭当前路由
  static pop({dynamic value}) {
    value != null
        ? routerGlobalKey.currentState.pop(value)
        : routerGlobalKey.currentState.pop();
  }

  //匹配路由
  static _matchRouter(String routerName) {
    return routerMap[routerName] ?? routerMap["loginPage"];
  }

  //路由跳转方法 拦截 动画
  static Route<dynamic> jumpTo(RouteSettings settings) {
    if (settings.arguments != null)
      _matchRouter(settings.name).setData(settings.arguments);
    return MaterialPageRoute(
      builder: (context) => _matchRouter(settings.name),
      settings: settings,
    );
  }

  //获取当前路由名
  static String getCurrentRoute(context) {
    return ModalRoute.of(context).settings.name;
  }
}
